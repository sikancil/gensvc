{
  "name": "<%= projectName %>",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {
    <% if (projectType === 'Monorepo') { -%>
    "@<%= rootTemplateData.projectName %>/shared": "workspace:*",
    <% } -%>
    "@nestjs/common": "^10.0.0",
    "@nestjs/core": "^10.0.0",
    <% if (appType === 'API Gateway (HTTP)') { -%>
    "@nestjs/platform-express": "^10.0.0",
    <% } -%>
    <% if (appType === 'Microservice') { -%>
    "@nestjs/microservices": "^10.0.0",
    <% } -%>
    <% if (includeWebsockets) { -%>
    "@nestjs/websockets": "^10.3.10",
    "@nestjs/platform-socket.io": "^10.3.10",
    <% } -%>
    <% if (transport === 'Redis') { -%>
    "redis": "^4.6.15",
    <% } -%>
    <% if (transport === 'Kafka') { -%>
    "kafkajs": "^2.2.4",
    <% } -%>
    <% if (transport === 'NATS') { -%>
    "nats": "^2.2.0",
    <% } -%>
    <% if (includeConfig) { -%>
    "@nestjs/config": "^3.2.2",
    <% } -%>
    <% if (includeValidation) { -%>
    "nestjs-zod": "^3.0.0",
    "zod": "^3.23.8",
    <% } -%>
    <% if (includeLogging) { -%>
    "nestjs-pino": "^4.1.0",
    <% } -%>
    <% if (usePrisma) { -%>
    "@prisma/client": "^5.17.0",
    <% } -%>
    <% if (useSequelize) { -%>
    "@nestjs/sequelize": "^10.0.1",
    "sequelize": "^6.37.3",
    "sequelize-typescript": "^2.1.6",
    "pg": "^8.12.0",
    "pg-hstore": "^2.3.4",
    <% } -%>
    <% if (includeAuth) { -%>
    "@nestjs/passport": "^10.0.3",
    "@nestjs/jwt": "^10.2.0",
    "passport": "^0.7.0",
    <% } -%>
    <% if (includeLocalAuth) { -%>
    "passport-local": "^1.0.0",
    "bcrypt": "^5.1.1",
    <% } -%>
    <% if (includeGoogleAuth) { -%>
    "passport-google-oauth20": "^2.0.0",
    <% } -%>
    <% if (includeCaching) { -%>
    "@nestjs/cache-manager": "^2.2.2",
    "cache-manager": "^5.7.0",
    "cache-manager-redis-store": "^3.0.1",
    <% } -%>
    <% if (includeQueues) { -%>
    "@nestjs/bullmq": "^10.1.1",
    "bullmq": "^5.10.2",
    <% } -%>
    <% if (includeFcm) { -%>
    "firebase-admin": "^12.2.0",
    <% } -%>
    "reflect-metadata": "^0.2.0",
    "rxjs": "^7.8.1"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.0.0",
    "@types/express": "^4.17.17",
    "@types/jest": "^29.5.2",
    "@types/node": "^20.3.1",
    "@types/supertest": "^6.0.0",
    <% if (useSequelize) { -%>
    "sequelize-cli": "^6.6.2",
    "@types/sequelize": "^4.28.20",
    <% } -%>
    <% if (includeLocalAuth) { -%>
    "@types/passport-local": "^1.0.38",
    "@types/bcrypt": "^5.0.2",
    <% } -%>
    <% if (includeGoogleAuth) { -%>
    "@types/passport-google-oauth20": "^2.0.16",
    <% } -%>
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "eslint": "^8.42.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.5.0",
    <% if (includeLogging) { -%>
    "pino-pretty": "^11.2.1",
    <% } -%>
    <% if (usePrisma) { -%>
    "prisma": "^5.17.0",
    <% } -%>
    "prettier": "^3.0.0",
    "source-map-support": "^0.5.21",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.3"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  },
  <% if (usePrisma) { -%>
  "prisma": {
    "schema": "prisma/schema.prisma"
  }
  <% } -%>
}
